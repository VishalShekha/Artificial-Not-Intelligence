agent - entity that perceives its environment and acts upon that environment  

state - a configuration of the agent and its environment

initial state - a state where agent begins

actions - choices that can be made in a state
ACTIONS(s) returns the set of actions that can be executed in a state 's'

trasition model - a description of what state results from performing any applicable action in any state
RESULT(s, a) returns the state resulting from performing action 'a' in state 's'
 
state space - the set of all states reachable from the initial state by any sequence of actions

goal function - way to determine whether a given state is a goal state

path cost - numerical cost associated with a given path g(n).

solution - a sequence of actions that leads from the initial state to a goal state 

optimal solution - a solution that has the lowest path coat among all the solutions

/////////////////////////////////////////

node {

	a data structure that keeps track of 
	- a state
	- a parent (node that generated this node)
	- an action (action applied to parent to get this node)
	- a path cost (from initial state to node)

}


Approach {

	1. Start with a frontier that contains the initial state.
	2. Repeat : 
		a. if the frontier is empty, then no solution.
		b. Remove a node from the frontier.
		c. If node contains goal state , return the solutioin. 
		d. Expand node, add resulting nodes to the frontier.

} 


Revised Approach {

	1. Start with a frontier that contains the initial state and Start with an empty explored set.
	2. Repeat : 
		a. if the frontier is empty, then no solution.
		b. Remove a node from the frontier.
		c. If node contains goal state , return the solutioin. 
		d. Expand node, add resulting nodes to the frontier if they aren't already in the frontier or the explored set.

} 

/////////////////////////////////////////

A Revised Approach with frontier as stack is called DEPTH-FIRST SEARCH. 
search algorithm that always expands the deepest node in the frontier.


A Revised Approach with frontier as queue is called BREADTH-FIRST SEARCH. 
search algorithm that always expands the shallowest node in the frontier. 

uninformed search {
	search strategy that uses no problem-specific knowledge
	Example : BFS, DFS.
}

///////////////////////////////////////////
informed search {
	search strategy that uses problem-specific knowledge to find solution more efficiently
}

greedy best-first search - search algorithm that expands the node that is closest to the goal, as estimated by a heuristic function h(n)

A heuristic is a function that determines how near a state is to the desired state. Heuristics functions vary depending on the problem and must be tailored to match that particular challenge.


A* search  - alogrithm that expands node with lowest value of g(n) + h(n)

//////////////////////////////////////////
Adversarial search - It involves tracing the movement of an enemy or opponent, who changes the state of the problem every step in a direction that the user or agent doesn't want.

MINIMAX/////////////

function mini_max(node , depth , maxPlayer)
	if depth = 0
		return the heuristic value of node
	if maxPlayer
		bestValue := -infinity
		for each child of node 
			value := mini_max(child , depth - 1 , false)
			bestValue := max(bestValue , value)
		return bestValue